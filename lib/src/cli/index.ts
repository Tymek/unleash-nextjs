#!/usr/bin/env node
import * as fs from "node:fs/promises";
import { Command } from "@commander-js/extra-typings";
import { loadEnvConfig } from "@next/env";
import type { ClientFeaturesResponse } from "unleash-client";
import {
  error,
  fetchDefinitions,
  intro,
  step,
  typedExports,
  version,
} from "./helpers";
import { typesFromDefinitions } from "./typesFromDefinitions";

const program = new Command()
  .name("unleash")
  .version(version)
  .option("-d, --debug", "output extra debugging", process.env.DEBUG === "true")
  .showHelpAfterError()
  .configureOutput({
    outputError: (str, write) => write(error(str)),
  })
  .addHelpText("before", intro)
  .hook("preSubcommand", async () => {
    const options = program.opts();
    await loadEnvConfig(process.cwd(), undefined, {
      info: (...msg: string[]) => {
        if (options.debug) {
          console.debug(...msg);
        }
      },
      error: (...msg) => {
        program.error(msg.join(" "));
      },
    });
  });

program
  .command("get-definitions")
  .description(
    "Download feature flags definitions for bootstrapping (offline use) of server-side SDK."
  )
  .argument(
    "<file>",
    "output file name (e.g. `./generated/feature-flag-definitions.json`)"
  )
  .action(async (file) => {
    const definitions = await fetchDefinitions();
    step("- Saving definitions to file");
    await fs.writeFile(file, JSON.stringify(definitions, null, 2));
    step("output:", file);
  });

program
  .command("generate-types")
  .summary("Generate types and typed functions from feature flags.")
  .description(
    "Generate types and typed functions from feature flags defined in an Unleash instance. " +
      "It will also generate strictly typed versions of `useFlag`, `useVariant`, `useFlags` and `flagsClient` (unless `--typesOnly` is used)."
  )
  .argument("<file>", "output file name (e.g. `./generated/unleash.ts`)")
  .option(
    "-t, --typesOnly",
    "don't include typed versions of functions exported from `@unleash/nextjs`",
    false
  )
  .option(
    "-b, --bootstrap <sourceFile>",
    "load definitions from a file instead of fetching definitions (work offline)"
  )
  .action(async (file, options) => {
    console.log(intro);
    let definitions: ClientFeaturesResponse;

    if (options.bootstrap) {
      step("- Loading feature toggle definitions from file");
      step("source file:", options.bootstrap);
      const source = (await fs.readFile(options.bootstrap)).toString();
      definitions = JSON.parse(source);
    } else {
      definitions = await fetchDefinitions();
    }

    const withVariant = definitions?.features.filter(
      ({ variants }) => variants.length > 0
    ).length;
    step(
      "found feature toggle definitions:",
      `${definitions?.features.length}`
    );
    step("found definitions with variants:", `${withVariant}`);

    step("- Generating types");
    const types = typesFromDefinitions(definitions);

    step(`- Writing types to file`);
    const banner = `/**
 * Generated by @unleash/nextjs v${version}
 * Do not edit manually.
 */\n\n`;
    let output = banner;
    if (!options.typesOnly) {
      output += typedExports.imports + "\n\n";
    }
    output += types;
    if (!options.typesOnly) {
      output += typedExports.body;
    }
    step(`output:`, file);
    await fs.writeFile(file, output);
  });

program.parse(process.argv);
